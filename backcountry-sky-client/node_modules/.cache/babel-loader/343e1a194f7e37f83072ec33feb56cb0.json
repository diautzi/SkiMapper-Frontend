{"ast":null,"code":"var _jsxFileName = \"/Users/dia_utzi/Documents/Development/finalProject/frontend/backcountry-sky-client/src/components/Map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '55%',\n    height: '55%',\n    marginLeft: '330px',\n    marginBottom: '20px'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: this.props.path.latitude,\n              lng: this.props.path.longitude\n            }\n          });\n        });\n      }\n    } else {\n      this.setState({\n        currentLocation: {\n          lat: this.props.path.latitude,\n          lng: this.props.path.longitude\n        }\n      });\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    let latitude = this.props.path.latitude;\n    console.log(latitude);\n    let longitude = this.props.path.longitude;\n    console.log(longitude);\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n}\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/dia_utzi/Documents/Development/finalProject/frontend/backcountry-sky-client/src/components/Map.js"],"names":["React","ReactDOM","mapStyles","map","position","width","height","marginLeft","marginBottom","CurrentLocation","Component","constructor","props","initialCenter","lat","lng","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","current","maps","center","LatLng","panTo","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","path","latitude","longitude","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","console","log","style","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '55%',\n    height: '55%',\n    marginLeft: '330px',\n    marginBottom: '20px'\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n   const map = this.map;\n   const current = this.state.currentLocation;\n\n   const google = this.props.google;\n   const maps = google.maps;\n\n   if (map) {\n     let center = new maps.LatLng(current.lat, current.lng);\n     map.panTo(center);\n   }\n }\n\n componentDidMount() {\n   if (this.props.centerAroundCurrentLocation) {\n     if (navigator && navigator.geolocation) {\n       navigator.geolocation.getCurrentPosition(pos => {\n         const coords = pos.coords;\n         this.setState({\n           currentLocation: {\n             lat: this.props.path.latitude,\n             lng: this.props.path.longitude\n           }\n         });\n       });\n     }\n   } else {\n     this.setState({\n     currentLocation: {\n       lat: this.props.path.latitude,\n       lng: this.props.path.longitude\n     }\n     })\n   }\n   this.loadMap();\n }\n\n loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n  renderChildren() {\n     const { children } = this.props;\n\n     if (!children) return;\n\n     return React.Children.map(children, c => {\n       if (!c) return;\n       return React.cloneElement(c, {\n         map: this.map,\n         google: this.props.google,\n         mapCenter: this.state.currentLocation\n       });\n     });\n   }\n\n   render() {\n\n     let latitude = this.props.path.latitude\n     console.log(latitude)\n\n     let longitude = this.props.path.longitude\n     console.log(longitude)\n\n     const style = Object.assign({}, mapStyles.map);\n        return (\n          <div>\n            <div style={style} ref=\"map\">\n              Loading map...\n            </div>\n            {this.renderChildren()}\n          </div>\n        );\n      }\n\n  }\n  export default CurrentLocation;\n\n  CurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: -1.2884,\n      lng: 36.8233\n    },\n    centerAroundCurrentLocation: false,\n    visible: true\n  };\n"]},"metadata":{},"sourceType":"module"}